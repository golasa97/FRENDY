//-----------------------------------------------------
// FMUFGFixedSource.h : default fixed source for UFG (J4u, U235)
//        
//-----------------------------------------------------

#pragma once

#include "MGXSUtils/FMGenerator/FMGenerator_global.h"

namespace FMGen
{
	class FMUFGFixedSource
	{
	private:

		//input fission spectrum
		int					chi_points;
		vector<REAL>		chi;
		vector<REAL>		chi_e_grid;

		//fission spectrum for ultra-fine group
		vector<REAL>		chi_uf;

	public:
		FMUFGFixedSource() {};
		~FMUFGFixedSource() {};
		void init(vector<REAL>& uf_energy_boundary, vector<REAL>& uf_energy_midpoint)
		{
			// fission spectrum of U235, JENDL4.0u, incident energy :1.0e-5 eV, taken from JANIS4.0 table data
#if 1
			chi_points = 162;
			REAL ewk[] = { 0.01,
				0.02,
				0.03,
				0.04,
				0.05,
				0.06,
				0.07,
				0.08,
				0.1,
				0.15,
				0.2,
				0.25,
				0.3,
				0.35,
				0.4,
				0.45,
				0.5,
				0.55,
				0.6,
				0.65,
				0.7,
				0.75,
				0.8,
				0.85,
				0.9,
				0.95,
				1,
				1.5,
				2,
				2.5,
				3,
				3.5,
				4,
				4.5,
				5,
				5.5,
				6,
				6.5,
				7,
				7.5,
				8,
				8.5,
				9,
				9.5,
				10,
				15,
				20,
				25,
				30,
				35,
				40,
				45,
				50,
				55,
				60,
				65,
				70,
				75,
				80,
				85,
				90,
				95,
				100,
				150,
				200,
				250,
				300,
				350,
				400,
				450,
				500,
				550,
				600,
				650,
				700,
				750,
				800,
				850,
				900,
				950,
				1000,
				1500,
				2000,
				2500,
				3000,
				3500,
				4000,
				4500,
				5000,
				5500,
				6000,
				6500,
				7000,
				7500,
				8000,
				8500,
				9000,
				9500,
				10000,
				15000,
				20000,
				25000,
				30000,
				35000,
				40000,
				45000,
				50000,
				55000,
				60000,
				65000,
				70000,
				75000,
				80000,
				85000,
				90000,
				95000,
				100000,
				150000,
				200000,
				250000,
				300000,
				350000,
				400000,
				450000,
				500000,
				550000,
				600000,
				650000,
				700000,
				750000,
				800000,
				850000,
				900000,
				950000,
				1000000,
				1500000,
				2000000,
				2500000,
				3000000,
				3500000,
				4000000,
				4500000,
				5000000,
				5500000,
				6000000,
				6500000,
				7000000,
				7500000,
				8000000,
				8500000,
				9000000,
				9500000,
				1.00E+07,
				1.10E+07,
				1.20E+07,
				1.30E+07,
				1.40E+07,
				1.50E+07,
				1.60E+07,
				1.70E+07,
				1.80E+07,
				2.00E+07
			};
			REAL cwk[] = { 5.77E-11,
				8.16E-11,
				1.00E-10,
				1.15E-10,
				1.29E-10,
				1.41E-10,
				1.53E-10,
				1.63E-10,
				1.82E-10,
				2.24E-10,
				2.58E-10,
				2.89E-10,
				3.16E-10,
				3.41E-10,
				3.65E-10,
				3.87E-10,
				4.08E-10,
				4.28E-10,
				4.47E-10,
				4.65E-10,
				4.83E-10,
				5.00E-10,
				5.16E-10,
				5.32E-10,
				5.47E-10,
				5.62E-10,
				5.77E-10,
				7.07E-10,
				8.16E-10,
				9.12E-10,
				1.00E-09,
				1.08E-09,
				1.15E-09,
				1.22E-09,
				1.29E-09,
				1.35E-09,
				1.41E-09,
				1.47E-09,
				1.53E-09,
				1.58E-09,
				1.63E-09,
				1.68E-09,
				1.73E-09,
				1.78E-09,
				1.82E-09,
				2.24E-09,
				2.58E-09,
				2.89E-09,
				3.16E-09,
				3.41E-09,
				3.65E-09,
				3.87E-09,
				4.08E-09,
				4.28E-09,
				4.47E-09,
				4.65E-09,
				4.83E-09,
				5.00E-09,
				5.16E-09,
				5.32E-09,
				5.47E-09,
				5.62E-09,
				5.77E-09,
				7.07E-09,
				8.16E-09,
				9.12E-09,
				9.99E-09,
				1.08E-08,
				1.15E-08,
				1.22E-08,
				1.29E-08,
				1.35E-08,
				1.41E-08,
				1.47E-08,
				1.53E-08,
				1.58E-08,
				1.63E-08,
				1.68E-08,
				1.73E-08,
				1.78E-08,
				1.82E-08,
				2.23E-08,
				2.58E-08,
				2.88E-08,
				3.16E-08,
				3.41E-08,
				3.65E-08,
				3.87E-08,
				4.08E-08,
				4.28E-08,
				4.47E-08,
				4.65E-08,
				4.82E-08,
				4.99E-08,
				5.15E-08,
				5.31E-08,
				5.47E-08,
				5.62E-08,
				5.76E-08,
				7.05E-08,
				8.13E-08,
				9.08E-08,
				9.93E-08,
				1.07E-07,
				1.14E-07,
				1.21E-07,
				1.28E-07,
				1.34E-07,
				1.39E-07,
				1.45E-07,
				1.50E-07,
				1.55E-07,
				1.60E-07,
				1.65E-07,
				1.69E-07,
				1.74E-07,
				1.78E-07,
				2.14E-07,
				2.43E-07,
				2.67E-07,
				2.86E-07,
				3.02E-07,
				3.15E-07,
				3.26E-07,
				3.34E-07,
				3.40E-07,
				3.45E-07,
				3.47E-07,
				3.49E-07,
				3.50E-07,
				3.49E-07,
				3.48E-07,
				3.47E-07,
				3.45E-07,
				3.42E-07,
				3.01E-07,
				2.46E-07,
				1.90E-07,
				1.41E-07,
				1.03E-07,
				7.45E-08,
				5.35E-08,
				3.82E-08,
				2.71E-08,
				1.91E-08,
				1.34E-08,
				9.33E-09,
				6.47E-09,
				4.47E-09,
				3.08E-09,
				2.11E-09,
				1.45E-09,
				9.93E-10,
				4.65E-10,
				2.16E-10,
				9.98E-11,
				4.58E-11,
				2.09E-11,
				9.50E-12,
				4.29E-12,
				1.93E-12,
				3.86E-13
			};
#else
		//ACE file data processed by FRENDY, J4.0u, ein=1.0e-5 eV
			chi_points = 203;
			REAL ewk[] = {
	1.000E-02,
	2.000E-02,
	3.000E-02,
	4.000E-02,
	5.000E-02,
	6.000E-02,
	7.000E-02,
	8.000E-02,
	1.000E-01,
	1.500E-01,
	2.000E-01,
	2.500E-01,
	3.000E-01,
	3.500E-01,
	4.000E-01,
	4.500E-01,
	5.000E-01,
	5.500E-01,
	6.000E-01,
	6.500E-01,
	7.000E-01,
	7.500E-01,
	8.000E-01,
	8.500E-01,
	9.000E-01,
	9.500E-01,
	1.000E+00,
	1.500E+00,
	2.000E+00,
	2.500E+00,
	3.000E+00,
	3.500E+00,
	4.000E+00,
	4.500E+00,
	5.000E+00,
	5.500E+00,
	6.000E+00,
	6.500E+00,
	7.000E+00,
	7.500E+00,
	8.000E+00,
	8.500E+00,
	9.000E+00,
	9.500E+00,
	1.000E+01,
	1.500E+01,
	2.000E+01,
	2.500E+01,
	3.000E+01,
	3.500E+01,
	4.000E+01,
	4.500E+01,
	5.000E+01,
	5.500E+01,
	6.000E+01,
	6.500E+01,
	7.000E+01,
	7.500E+01,
	8.000E+01,
	8.500E+01,
	9.000E+01,
	9.500E+01,
	1.000E+02,
	1.500E+02,
	2.000E+02,
	2.500E+02,
	3.000E+02,
	3.500E+02,
	4.000E+02,
	4.500E+02,
	5.000E+02,
	5.500E+02,
	6.000E+02,
	6.500E+02,
	7.000E+02,
	7.500E+02,
	8.000E+02,
	8.500E+02,
	9.000E+02,
	9.500E+02,
	1.000E+03,
	1.500E+03,
	2.000E+03,
	2.500E+03,
	3.000E+03,
	3.500E+03,
	4.000E+03,
	4.500E+03,
	5.000E+03,
	5.500E+03,
	6.000E+03,
	6.500E+03,
	7.000E+03,
	7.500E+03,
	8.000E+03,
	8.500E+03,
	9.000E+03,
	9.500E+03,
	1.000E+04,
	1.500E+04,
	2.000E+04,
	2.500E+04,
	3.000E+04,
	3.500E+04,
	4.000E+04,
	4.500E+04,
	5.000E+04,
	5.500E+04,
	6.000E+04,
	6.500E+04,
	7.000E+04,
	7.500E+04,
	8.000E+04,
	8.500E+04,
	9.000E+04,
	9.500E+04,
	1.000E+05,
	1.500E+05,
	2.000E+05,
	2.500E+05,
	3.000E+05,
	3.500E+05,
	4.000E+05,
	4.500E+05,
	5.000E+05,
	5.500E+05,
	6.000E+05,
	6.500E+05,
	7.000E+05,
	7.500E+05,
	8.000E+05,
	8.500E+05,
	9.000E+05,
	9.500E+05,
	1.000E+06,
	1.500E+06,
	2.000E+06,
	2.500E+06,
	3.000E+06,
	3.500E+06,
	4.000E+06,
	4.500E+06,
	5.000E+06,
	5.500E+06,
	6.000E+06,
	6.500E+06,
	7.000E+06,
	7.500E+06,
	8.000E+06,
	8.500E+06,
	9.000E+06,
	9.500E+06,
	1.000E+07,
	1.020E+07,
	1.040E+07,
	1.060E+07,
	1.080E+07,
	1.100E+07,
	1.120E+07,
	1.140E+07,
	1.160E+07,
	1.180E+07,
	1.200E+07,
	1.220E+07,
	1.240E+07,
	1.260E+07,
	1.280E+07,
	1.300E+07,
	1.320E+07,
	1.340E+07,
	1.360E+07,
	1.380E+07,
	1.400E+07,
	1.420E+07,
	1.440E+07,
	1.460E+07,
	1.480E+07,
	1.500E+07,
	1.520E+07,
	1.540E+07,
	1.560E+07,
	1.580E+07,
	1.600E+07,
	1.620E+07,
	1.640E+07,
	1.660E+07,
	1.680E+07,
	1.700E+07,
	1.720E+07,
	1.740E+07,
	1.760E+07,
	1.780E+07,
	1.800E+07,
	1.840E+07,
	1.880E+07,
	1.920E+07,
	1.960E+07,
	2.000E+07,
	2.020E+07,
	2.040E+07,
	2.060E+07,
	2.080E+07,
	2.100E+07 };
			REAL cwk[] = {
			5.7714E-05,
			8.1620E-05,
			9.9963E-05,
			1.1543E-04,
			1.2905E-04,
			1.4137E-04,
			1.5270E-04,
			1.6324E-04,
			1.8251E-04,
			2.2352E-04,
			2.5810E-04,
			2.8857E-04,
			3.1611E-04,
			3.4144E-04,
			3.6501E-04,
			3.8716E-04,
			4.0810E-04,
			4.2802E-04,
			4.4705E-04,
			4.6531E-04,
			4.8287E-04,
			4.9982E-04,
			5.1621E-04,
			5.3210E-04,
			5.4752E-04,
			5.6252E-04,
			5.7714E-04,
			7.0685E-04,
			8.1620E-04,
			9.1254E-04,
			9.9963E-04,
			1.0797E-03,
			1.1543E-03,
			1.2243E-03,
			1.2905E-03,
			1.3535E-03,
			1.4137E-03,
			1.4714E-03,
			1.5270E-03,
			1.5806E-03,
			1.6324E-03,
			1.6826E-03,
			1.7314E-03,
			1.7789E-03,
			1.8251E-03,
			2.2352E-03,
			2.5810E-03,
			2.8857E-03,
			3.1611E-03,
			3.4144E-03,
			3.6501E-03,
			3.8715E-03,
			4.0809E-03,
			4.2801E-03,
			4.4704E-03,
			4.6530E-03,
			4.8286E-03,
			4.9981E-03,
			5.1620E-03,
			5.3208E-03,
			5.4751E-03,
			5.6251E-03,
			5.7712E-03,
			7.0681E-03,
			8.1613E-03,
			9.1244E-03,
			9.9951E-03,
			1.0796E-02,
			1.1541E-02,
			1.2241E-02,
			1.2903E-02,
			1.3532E-02,
			1.4134E-02,
			1.4711E-02,
			1.5266E-02,
			1.5801E-02,
			1.6319E-02,
			1.6822E-02,
			1.7309E-02,
			1.7783E-02,
			1.8245E-02,
			2.2345E-02,
			2.5800E-02,
			2.8843E-02,
			3.1593E-02,
			3.4121E-02,
			3.6474E-02,
			3.8683E-02,
			4.0772E-02,
			4.2758E-02,
			4.4656E-02,
			4.6475E-02,
			4.8226E-02,
			4.9914E-02,
			5.1546E-02,
			5.3128E-02,
			5.4663E-02,
			5.6155E-02,
			5.7608E-02,
			7.0477E-02,
			8.1275E-02,
			9.0755E-02,
			9.9302E-02,
			1.0713E-01,
			1.1439E-01,
			1.2117E-01,
			1.2755E-01,
			1.3360E-01,
			1.3934E-01,
			1.4483E-01,
			1.5009E-01,
			1.5513E-01,
			1.5998E-01,
			1.6466E-01,
			1.6918E-01,
			1.7355E-01,
			1.7779E-01,
			2.1432E-01,
			2.4316E-01,
			2.6659E-01,
			2.8617E-01,
			3.0234E-01,
			3.1549E-01,
			3.2612E-01,
			3.3435E-01,
			3.4026E-01,
			3.4481E-01,
			3.4745E-01,
			3.4914E-01,
			3.4978E-01,
			3.4944E-01,
			3.4845E-01,
			3.4691E-01,
			3.4494E-01,
			3.4246E-01,
			3.0137E-01,
			2.4633E-01,
			1.8994E-01,
			1.4127E-01,
			1.0313E-01,
			7.4516E-02,
			5.3498E-02,
			3.8164E-02,
			2.7089E-02,
			1.9103E-02,
			1.3392E-02,
			9.3338E-03,
			6.4723E-03,
			4.4689E-03,
			3.0763E-03,
			2.1136E-03,
			1.4503E-03,
			9.9343E-04,
			8.5333E-04,
			7.3298E-04,
			6.2961E-04,
			5.4081E-04,
			4.6454E-04,
			3.9857E-04,
			3.4196E-04,
			2.9340E-04,
			2.5173E-04,
			2.1598E-04,
			1.8508E-04,
			1.5860E-04,
			1.3591E-04,
			1.1646E-04,
			9.9800E-05,
			8.5410E-05,
			7.3096E-05,
			6.2557E-05,
			5.3537E-05,
			4.5818E-05,
			3.9167E-05,
			3.3481E-05,
			2.8621E-05,
			2.4466E-05,
			2.0915E-05,
			1.7861E-05,
			1.5253E-05,
			1.3025E-05,
			1.1123E-05,
			9.4990E-06,
			8.1045E-06,
			6.9147E-06,
			5.8996E-06,
			5.0335E-06,
			4.2945E-06,
			3.6607E-06,
			3.1205E-06,
			2.6599E-06,
			2.2674E-06,
			1.9327E-06,
			1.4005E-06,
			1.0148E-06,
			7.3532E-07,
			5.3282E-07,
			3.8608E-07,
			3.0887E-07,
			2.3165E-07,
			1.5443E-07,
			7.7216E-08,
			0.0000E+00 };
#endif

			chi_e_grid.resize(chi_points);
			chi.resize(chi_points);

			for (int i = 0; i < chi_points; i++)
			{
				chi_e_grid[i] = ewk[i];
				chi[i] = cwk[i];
			}

			chi_uf.resize(uf_energy_boundary.size() - 1);
			DOUBLE sum = 0.0;
			for (int i = 0; i < static_cast<int>(uf_energy_boundary.size()) - 1; i++)
			{
				REAL e = uf_energy_midpoint[i];
				chi_uf[i] = getChi(e);
				sum += chi_uf[i] * (uf_energy_boundary[i] - uf_energy_boundary[i + 1]);
			}

			//normalize
			for (int i = 0; i < static_cast<int>(uf_energy_boundary.size()) - 1; i++)
			{
				chi_uf[i] /= sum;
			}

			//output data for debug
#if 0
			for (int i = 0; i < uf_energy_midpoint.size(); i++)
			{
				cout << setw(15) << i;
				cout << setw(15) << scientific << setprecision(5) << uf_energy_midpoint[i];
				cout << setw(15) << scientific << setprecision(5) << chi_uf[i];
				cout << endl;
			}
#endif

		};
		REAL getChi(REAL e)
		{
			if (e <= chi_e_grid[0])
				return chi[0];
			if (e >= chi_e_grid.back())
				return chi.back();
			for (int i = 0; i < chi_points - 1; i++)
			{
				if (e > chi_e_grid[i] && e < chi_e_grid[i + 1])
				{
					//log-linear
					REAL val = (chi[i + 1] - chi[i]) / (log(chi_e_grid[i + 1]) - log(chi_e_grid[i])) * (log(e) - log(chi_e_grid[i])) + chi[i];

					//linear-linear
					//REAL val = (chi[i + 1] - chi[i]) / (chi_e_grid[i + 1] - chi_e_grid[i]) * (e - chi_e_grid[i]) + chi[i];
					return val;
				}
			}
			return 0.0;
		};
		REAL getChiUFG(int i)
		{
			return chi_uf[i];
		};
		void calcMGFissionSpectrum(vector<REAL>& eb)
		{
			vector<REAL> val;
			val.resize(eb.size() - 1);

			for (int ig = 0; ig < static_cast<int>(eb.size()) - 1; ig++)
			{
				REAL ueb = eb[ig];
				REAL leb = eb[ig + 1];
				const int ndiv = 10000;
				val[ig] = 0.0;
				for (int i = 0; i < ndiv; i++)
				{
					REAL delta = abs(ueb - leb) / ndiv;
					REAL ene = leb + delta * ((REAL)i + 0.5);
					val[ig] += delta * getChi(ene);
				}
			}

			REAL sum = 0.0;
			for (int ig = 0; ig < static_cast<int>(val.size()); ig++)
				sum += val[ig];
			for (int ig = 0; ig < static_cast<int>(val.size()); ig++)
				val[ig] /= sum;

			for (int ig = 0; ig < static_cast<int>(val.size()); ig++)
			{
				cout << setw(5) << ig;
				cout << setw(15) << setprecision(5) << scientific << val[ig] << endl;
			}
		}
	};
}
